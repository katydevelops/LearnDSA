1. Two sum

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:
    Input: nums = [2,7,11,15], target = 9
    Output: [0,1]
    Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
    Input: nums = [3,2,4], target = 6
    Output: [1,2]

Example 3:
    Input: nums = [3,3], target = 6
    Output: [0,1]
 

Constraints:
Only one valid answer exists.
 


Brute Force: The brute force approach would be to use two nested loops - the outer loops picks each number in the array and the inner loops checks every other number to see if they sum to the target - quadratic time complexity O(n^2) due to having two nested loops

    nums = [2, 7, 11, 15] and target = 9:

    def twoSum (nums, target): 
        for i in range(len(nums)):                  // index is 0 and the number is 2
            for j in range (i + 1, len(nums)):      // index is 1 and the number is 7
                if nums[i] + nums[j] == target:     // if 2 + 7 = 0 then return the indices
                    return [i, j]                   // [0, 1] indices are returned accordingly










Enumerate() function adds a counter to an iterable and returns it as an enumerate object (which is an iterator with and index and the value)